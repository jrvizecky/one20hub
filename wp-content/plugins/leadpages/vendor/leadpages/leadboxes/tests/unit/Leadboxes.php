<?php


use GuzzleHttp\Client;
use Leadpages\Leadboxes\Leadboxes;

class TestLeadboxes extends \PHPUnit_Framework_TestCase
{

    public $login;
    public $leadboxes;
    public $client;
    public $leadboxTypes;
    public $leadboxId;
    public $username;
    public $password;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->client       = new Client();
        $this->login        = new fakeLogin($this->client);
        $this->leadboxes    = new Leadboxes($this->client, $this->login);
        $this->leadboxTypes = [
          'timed',
          'exit'
        ];
        $this->leadboxId = getenv('leadboxId');
        $this->username  = getenv('username');
        $this->password  = getenv('password');
    }


    public function test_get_all_leadboxes()
    {
        $this->login->getUser($this->username, $this->password)->parseResponse();
        $response = $this->leadboxes->getAllLeadboxes();
        $this->assertEquals('200', $response['code']);
    }

    public function test_build_single_leadbox_url(){

        $this->login->getUser($this->username, $this->password)->parseResponse();


        $urlTimed = $this->leadboxes->buildSingleLeadboxUrl($this->leadboxId, $this->leadboxTypes[0]);
        $urlExit  = $this->leadboxes->buildSingleLeadboxUrl($this->leadboxId, $this->leadboxTypes[1]);

        $parsedUrlTime = parse_url($urlTimed);
        $parsedUrlExit = parse_url($urlExit);

        //check timed leadbox
        $this->assertEquals($parsedUrlTime['scheme'], 'https');
        $this->assertEquals($parsedUrlTime['host'], 'my.leadpages.net');
        $this->assertEquals($parsedUrlTime['query'], 'popup_type=timed');

        //check exit leadbox
        $this->assertEquals($parsedUrlExit['scheme'], 'https');
        $this->assertEquals($parsedUrlExit['host'], 'my.leadpages.net');
        $this->assertEquals($parsedUrlExit['query'], 'popup_type=exit');
    }

    public function  test_get_single_leadbox_embed_code()
    {
        $this->login->getUser($this->username, $this->password)->parseResponse();

        $timedEmbedCode = $this->leadboxes->getSingleLeadboxEmbedCode($this->leadboxId, $this->leadboxTypes[0]);
        $exitEmbedCode = $this->leadboxes->getSingleLeadboxEmbedCode($this->leadboxId, $this->leadboxTypes[1]);


        $this->assertContains('200', $timedEmbedCode['code']);
        $this->assertContains('embed_code', $timedEmbedCode['response']);
        $this->assertContains('type%22%3A%20%22time', $timedEmbedCode['response']);

        $this->assertContains('200', $exitEmbedCode['code']);
        $this->assertContains('embed_code', $exitEmbedCode['response']);
        $this->assertContains('type%22%3A%20%22exit', $exitEmbedCode['response']);
    }

}
