<?php
/**
 * This class contains functions relating to functionality on the debugging page, such as
 * the deleting of all imported posts buy the plugin.
 * 
 * @since 1.4.1
 */
final class WPRSS_FTP_Debug {
	

	/**
	 * The Singleton Instance
	 */
	private static $instance = NULL;

	/**
	 * Constructor.
	 *
	 * @since 1.4.1
	 */
	public function __construct() {
		if ( self::$instance === NULL ) {

			// Add a 'Remove all posts' button to the debugging page
			add_filter( 'wprss_debug_operations', array( $this, 'debug_operations' ) );
			add_filter( 'wprss_debug_messages', array( $this, 'debug_messages' ) );

			// Add an action before posts are deleted
			add_action( 'before_delete_post', array( $this, 'before_delete_post' ) );

			// Add hooks for cron jobs
			add_action( 'delete_all_plugin_posts_hook', array( $this, 'delete_all_plugin_posts' ) );

		} else {
			wp_die( __( 'WPRSS_FTP_Debug class is a singleton class and cannot be redeclared.', WPRSS_TEXT_DOMAIN ) );
		}
	}


	/**
	 * Returns the singleton instance
	 */
	public static function get_instance() {
		if ( self::$instance === NULL ) {
			self::$instance = new self();
		}
		return self::$instance;
	}


	/**
	 * Registers the delete posts debug operation
	 * 
	 * @since 1.3
	 */
	public function debug_operations( $debug_operations ) {
		unset( $debug_operations['reimport-feeds'] );
		// Delete imported posts operation
		$debug_operations['ftp-delete-posts'] = array(
			'nonce'		=>  'wprss-ftp-delete-posts',
			'run'		=>  array( $this, 'schedule_delete_all_plugin_posts' ),
			'redirect' 	=>  'edit.php?post_type=wprss_feed&page=wprss-debugging&debug_message=ftp-delete-posts',
			'render'	=>	array( $this, 'debugging_delete_all_posts' )
		);
		return $debug_operations;
	}


	/**
	 * Registers the debug message for the plugin posts delete operation.
	 *
	 * @since 1.3
	 */
	public function debug_messages( $debug_messages ) {
		$debug_messages['ftp-delete-posts'] = array( $this, 'debug_deleting_posts_notice' );
		return $debug_messages;
	}


	/**
	 * Shows an admin notice, that notifies the user that all posts imported by the plugin are being deleted.
	 * 
	 * @since 1.3
	 */
	public function debug_deleting_posts_notice() {
		?>
		<div class="updated">
			<p>
				<?php _e( 'All posts created by the Feed To Post add-on are being deleted in the background.', WPRSS_TEXT_DOMAIN ); ?>
			</p>
		</div>
		<?php
    }


    /**
     * Adds a button in the debugging page, that deletes all posts imported by Feed to Post
     * 
     * @since 1.3
     */
	public function debugging_delete_all_posts() {
		?>
		<h3><?php _e( 'Delete imported posts (Feed To Post)', WPRSS_TEXT_DOMAIN ); ?></h3>
		<p><?php _e( 'Click the red button to delete all posts imported by the Feed to Post add-on.', WPRSS_TEXT_DOMAIN ); ?></p>
		<p><?php _e( '<em><strong>Note:</strong> This is a server-intensive process and can take long, depending on how much posts you have imported.</em>', WPRSS_TEXT_DOMAIN ); ?></p>            

		<form action="edit.php?post_type=wprss_feed&page=wprss-debugging" method="POST"> 
			<?php wp_nonce_field( 'wprss-ftp-delete-posts' );
			submit_button( __( 'Delete all imported posts', 'wprss' ), 'button-red', 'ftp-delete-posts', true  ); ?>
		</form>
		<?php
	}


	/**
     * Adds a button in the debugging page, that deletes all posts imported by Feed to Post
     * 
     * @deprecated
     * @since 1.3
     */
	public function show_error_log() {
		?>
		<h3>
			<?php _e( 'Feed To Post Error Log', WPRSS_TEXT_DOMAIN ); ?>
		</h3>

		<textarea readonly="readonly" id="wprss-ftp-error-log-textarea">
			<?php echo WPRSS_FTP_Utils::get_log(); ?>
		</textarea>

		<form action="edit.php?post_type=wprss_feed&page=wprss-debugging" method="POST"> 
			<?php wp_nonce_field( 'wprss-ftp-clear-error-log' );
			submit_button( __( 'Clear log', WPRSS_TEXT_DOMAIN ), 'button-primary', 'ftp-error-log', true  ); ?>
		</form>

		<?php
	}


	/**
	 * This function is triggered right before a post is deleted.
	 * It ensures that all attachements attached to the post are also deleted.
	 * 
	 * @since 1.3
	 */
	public function before_delete_post( $post_id ) {
		$meta = get_post_meta( $post_id, 'wprss_item_permalink', true );
		// If the post has this meta field, then it is a post generated by the add-on
		if ( !empty($meta) ) {
			// Determine if deleting attachments or not
			$delete_attachments = apply_filters( 'wprss_ftp_delete_attachments_with_posts', TRUE );
			if ( $delete_attachments === FALSE ) return;

			// Get the attachments
			$images = get_children(
				array(
					'post_parent'		=>	$post_id,
					'post_type'			=>	'attachment',
					'post_mime_type'	=>	'image'
				)
			);
			// Delete them
			foreach ( $images as $attachment_id => $attachment ) {
				wp_delete_post( $attachment_id );
			}
		}
	}


	/** 
	 * Removes the WHERE condition that checks the post type, from SQL queries.
	 *
	 * @since 2.5
	 */
	public function any_post_type( $where = '' ) {
        global $wpdb;
		return preg_replace( '/(AND)? ([^\.]*\.\)\()?(' . $wpdb->posts . '\.)?post_type\s=\s[\"\']ignore[\"\']/', '', $where );
	}


	/**
	 * Deletes all the posts imported by the plugin.
	 * 
	 * @since 1.0
	 */
	public function delete_all_plugin_posts() {
		$force_delete = apply_filters( 'wprss_ftp_force_delete', TRUE );
		// WPML fix: removes the current language from the query WHERE and JOIN clauses
		global $sitepress;
		if ( $sitepress !== NULL ) {
			remove_filter( 'posts_join', array( $sitepress,'posts_join_filter') );
			remove_filter( 'posts_where', array( $sitepress,'posts_where_filter') );
		}

		// Run the query
		add_filter( 'posts_where', array( $this, 'any_post_type' ) );
		// @dbopt
		$query = new WP_Query(
			array(
				'post_type'		 =>	'ignore', // Ignore this value, it's modified in any_post_type()
				'post_status'	 =>	'any',
				'posts_per_page'	=> -1,
				'meta_query'		=>	array(
					array(
						'key'		=>	'wprss_item_permalink',
						'compare'	=>	'EXISTS',
					)
				)
			)
		);
		remove_filter( 'posts_where', array( $this, 'any_post_type' ) );

		while( $query->have_posts() ) {
			$query->the_post();
			wp_delete_post( get_the_ID(), $force_delete );
		}
	}

	
	/**
	 * Schedules the cron job that runs delete_all_plugin_posts().
	 * 
	 * @since 1.3
	 */
	public function schedule_delete_all_plugin_posts() {
		wp_schedule_single_event( time(), 'delete_all_plugin_posts_hook' );
	}
}
